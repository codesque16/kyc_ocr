{"version":3,"sources":["components/AlertDismissable.js","pages/About.js","components/LoadButton.js","model/classes.js","pages/kyc.js","pages/Classify.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["AlertDismissable","this","props","show","react_default","a","createElement","Alert","variant","onClose","dismissible","title","dangerouslySetInnerHTML","__html","message","Component","Home","className","LoadButton","_ref","isLoading","text","loadingText","_ref$className","_ref$disabled","disabled","Object","objectWithoutProperties","_excluded","Button","assign","concat","Spinner","as","animation","size","role","aria-hidden","MODEL_CLASSES","0","1","2","3","4","5","Image","require","MODEL_INPUT_SIZE","preprocessImage","img","w","h","img_w","cols","img_h","rows","new_w","parseInt","Math","min","new_h","dst","window","cv","Mat","dsize","Size","resize","INTER_CUBIC","canvas","zeros","CV_8U","col_start","row_start","r","c","ucharPtr","classifyDocument","_callee2","preprocessed_img","model","scores","score_array","regenerator_default","wrap","_context2","prev","next","t0","console","tf","data","div","array","t1","sent","log","call","predict","reshape","abrupt","stop","getBlackHatImage","imageMat","cvtColor","COLOR_RGBA2GRAY","M","ones","morphologyEx","MORPH_BLACKHAT","COLOR_GRAY2RGBA","getImage","_callee3","buffer","_context3","load","kycimage","asyncToGenerator","mark","_callee","jsimg","src","pImage","probabilities","_context","matFromImageData","_x4","_x5","apply","arguments","MODEL_PATH","MODEL_INFO_PATH","CANVAS_SIZE","TOPK_PREDICTIONS","INDEXEDDB_KEY","Classify","_this","classCallCheck","_super","initWebcam","webcam","refs","resizeWidth","resizeHeight","facingMode","noWebcam","style","display","startWebcam","start","stopWebcam","getModelInfo","_callee5","_context5","fetch","method","then","_ref5","_callee4","response","_context4","json","modelLastUpdated","last_updated","catch","err","_x","updateModel","_callee6","_context6","setState","isDownloadingModel","save","modelUpdateAvailable","showModelUpdateAlert","showModelUpdateSuccess","classifyLocalImage","_callee7","croppedCanvas","image","imagebuffer","requestOptions","preds","context","ratioX","ratioY","ratio","_context7","isClassifying","cropper","getCroppedCanvas","fromPixels","toFloat","toDataURL","Uint8ClampedArray","headers","Content-Type","body","JSON","stringify","imagebuf","height","shape","width","channels","getTopKClasses","predictions","photoSettingsOpen","state","getContext","clearRect","drawImage","dispose","classifyWebcamImage","_callee8","imageCapture","tensorData","_context8","capture","tensorAsBase64","toPixels","processImage","_ref9","_callee9","_context9","expandDims","sub","_x2","_ref10","_callee10","values","topK","valuesAndIndices","i","topkValues","topkIndices","_i","topClassesAndProbs","_i2","_context10","length","push","value","index","sort","b","Float32Array","Int32Array","probability","toFixed","_x3","handlePanelClick","event","handleFileChange","target","files","file","URL","createObjectURL","filename","name","handleTabSelect","activeKey","modelLoaded","isModelLoading","_callee11","db","item","dateSaved","_context11","openDB","transaction","objectStore","get","Date","modelArtifactsInfo","getTime","warn","_callee12","_context12","e","_this2","react","onClick","aria-controls","aria-expanded","index_esm","Collapse","in","id","Container","modelType","Tabs","defaultActiveKey","onSelect","Tab","eventKey","ref","autoPlay","playsInline","muted","Form","Group","controlId","Label","Control","onChange","type","accept","react_cropper_default","guides","viewMode","ListGroup","map","category","Item","key","Routes","childProps","react_router","path","exact","component","About","App","dismissUpdateAlert","showUpdateAlert","reloadMsg","openCV","onLoaded","getBuildInformation","onFailed","version","Navbar","collapseOnSelect","expand","Brand","href","Toggle","Nav","react_router_dom","to","updateAvailable","paddingTop","components_AlertDismissable","withRouter","isLocalhost","Boolean","location","hostname","match","register","config","navigator","process","origin","addEventListener","swUrl","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","newerSwAvailable","sw","onUpdate","waiting","active","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","error","Index","contentCached","handleUpdate","waitingServiceWorker","postMessage","src_App_0","ReactDOM","render","src_Index","document","getElementById"],"mappings":"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","file":"static/js/main.ab109093.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\n\n/**\n * Class to handle the rendering of a dismissiable alert to use for things like errors.\n * @extends React.Component\n */\nclass AlertDismissable extends Component {\n\n  render() {\n    if (this.props.show) {\n      return (\n        <Alert variant={this.props.variant || 'danger'} onClose={this.props.onClose} dismissible>\n          { this.props.title && <h5><strong>{this.props.title}</strong></h5> }\n          <div dangerouslySetInnerHTML={{ __html: this.props.message }} />\n        </Alert>\n      );\n    }\n    return null;\n  }\n}\n\nexport default AlertDismissable;\n","import React, { Component } from 'react';\nimport './About.css';\n\n/**\n * Class to handle the rendering of the Home page.\n * @extends React.Component\n */\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"About container\">\n        <h1>About</h1>\n        <p>\n          This is a TensorFlow.js web application where users can classify images selected locally\n          or taken with their device's camera. The app uses TensorFlow.js and a pre-trained model\n          converted to the TensorFlow.js format to provide the inference capabilities.\n          This model is saved locally in the browser using IndexedDB. A service worker is also used\n          to provide offline capabilities.\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\n\n/**\n * This produces a button that will have a loading animation while the isLoading property is true.\n */\nexport default ({\n  isLoading,\n  text,\n  loadingText,\n  className = '',\n  disabled = false,\n  ...props\n}) =>\n  <Button\n    className={`LoadButton ${className}`}\n    disabled={disabled || isLoading}\n    {...props}\n  >\n    {isLoading && <Spinner\n      as=\"span\"\n      animation=\"border\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />}{' '}\n    {isLoading ? loadingText : text}\n  </Button>;\n","/* eslint-disable */\n// Theses classes should correspond to the softmax output of your model.\n// ['AADHAAR_EXTRACTION', 'DL_EXTRACTION', 'PAN_EXTRACTION',\n// 'PASSPORT_EXTRACTION', 'VOTER_EXTRACTION']\nexport const MODEL_CLASSES = {\n    0: 'AADHAAR',\n    1: 'DRIVING LICENSE',\n    2: 'NOT A DOCUMENT',\n    3: 'PAN',\n    4: 'PASSPORT',\n    5: 'VOTER ID',\n}\n//export const MODEL_CLASSES = {\n//    0: 'AADHAAR',\n//    1: 'DRIVING LICENSE',\n//    2: 'PAN',\n//    3: 'PASSPORT',\n//    4: 'VOTER ID',\n//}\n","//import cv from \"@techstark/opencv-js\";\n//import { createWorker } from 'tesseract.js';\n//import PSM from 'tesseract.js/src/constants/PSM.js'\n//import OEM from 'tesseract.js/src/constants/OEM.js'\n//import path from 'path';\nimport * as tf from '@tensorflow/tfjs';\nconst { Image } = require('image-js');\n//const IJS = require(\"vshushkov-imagejs\");\n//const baseblob = require('based-blob');\n\n//const worker = createWorker({\n//  langPath: path.join(__dirname, 'public', 'tesseract_data'),\n//  logger: m => console.log(m),\n//});\nconst MODEL_INPUT_SIZE = 200;\nfunction preprocessImage(img,w,h) {\n    let img_w=img.cols\n    let img_h=img.rows\n    let new_w = parseInt(img_w * Math.min(w/img_w, h/img_h))\n    let new_h = parseInt(img_h * Math.min(w/img_w, h/img_h))\n    //console.log(new_w,new_h)\n\n    let dst = new window.cv.Mat();\n    let dsize = new window.cv.Size(new_w,new_h);\n    //console.log(dsize)\n    //console.log(img_w,img_h,img.data)\n    // You can try more different parameters\n    window.cv.resize(img, dst, dsize, 0, 0, window.cv.INTER_CUBIC);\n    let canvas = window.cv.Mat.zeros(h,w, window.cv.CV_8U);\n    let col_start=~~((w-new_w)/2)\n    let row_start=~~((h-new_h)/2)\n    //console.log(row_start,col_start)\n    for (let r = 0; r < new_h; r++){\n      for(let c = 0; c < new_w; c++){\n        canvas.ucharPtr(row_start+r,col_start+c)[0]=dst.ucharPtr(r,c)[0]\n      }\n    }\n\n    return canvas\n}\n\nasync function classifyDocument(preprocessed_img,model) {\n  //const classes=['AADHAAR_EXTRACTION', 'DL_EXTRACTION', 'PAN_EXTRACTION',\n  //'PASSPORT_EXTRACTION', 'VOTER_EXTRACTION']\n  //var predicted=\"NO_OUTPUT\";\n  //let model = await tf.loadLayersModel('file://public/kyc_model/model.json');\n  console.log(await tf.tensor(preprocessed_img.data).div(tf.scalar(255.0)).array())\n  let scores = await model.predict([tf.tensor(preprocessed_img.data).div(tf.scalar(255.0)).reshape([1, MODEL_INPUT_SIZE, MODEL_INPUT_SIZE, 1])]);\n  //console.log(await scores.data())\n  let score_array= await scores.array()\n  //let predicted=score_array[0].indexOf(Math.max(...score_array));\n  return tf.softmax(score_array[0]).array()\n}\n\n/*async function getTextFromImage(buffer) {\n  await worker.load()\n  await worker.loadLanguage('eng')\n  await worker.initialize('eng')\n  await worker.setParameters({\n    tessedit_pageseg_mode: PSM.AUTO,\n    //tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ ',\n    //preserve_interword_spaces: \"1\",\n    //tessjs_create_box: \"1\",\n    //tessedit_ocr_engine_mode: OEM.LSTM_ONLY\n  })\n  const {data} = await worker.recognize(buffer);\n  await worker.terminate()\n\n  //printKeys(data)\n  //console.log(typeof data)\n  return data['text']\n}\n*/\nfunction getBlackHatImage(imageMat) {\n  console.log(imageMat)\n  window.cv.cvtColor(imageMat, imageMat, window.cv.COLOR_RGBA2GRAY);\n  console.log(imageMat)\n  let dst = new window.cv.Mat();\n  console.log(dst)\n  let M = window.cv.Mat.ones(25,7, window.cv.CV_8U);\n  console.log(M)\n  window.cv.morphologyEx(imageMat, dst, window.cv.MORPH_BLACKHAT, M);\n  window.cv.cvtColor(dst, dst, window.cv.COLOR_GRAY2RGBA);\n  console.log(dst)\n\n  /*new Jimp({ data: dst.data, width: dst.cols, height: dst.rows }, (err, image) => {\n  if (err) throw err;\n  image.write('tesseract.png');\n  // this image is 1280 x 768, pixels are loaded from the given buffer.\n  });\n  */\n  return dst\n}\n\n\nasync function getImage(buffer) {\n    //return buffer\n    let img = await Image.load(buffer);\n//  let output = tf.browser.fromPixels(img);\n    return img;\n    // read from a file\n\n// read JPG data from stream\n    //let bitmap = new IJS.Bitmap();\n    //console.log(baseblob.toBlob(buffer.split(',')[1]))\n    //bitmap.read(baseblob.toBlob(buffer.split(',')[1]), { type: IJS.ImageType.PNG })\n    //.then(function() {\n    //    console.log('read');\n    //});\n    //return bitmap\n    //let img = new Image();\n    //img.onload = function() {\n    //    console.log(\"Image created\");\n    //    return img;\n    //};\n    //img.src = buffer;\n    //await img.decode();\n    //console.log(img)\n    //return img\n}\n\nconst kycimage = async function(buffer,model) {\n    //console.log(jsimg);\n    //let src = buffer;\n    let jsimg = await getImage(buffer);\n    const src = await new window.cv.matFromImageData(jsimg)\n    //src.convertTo(src, window.cv.CV_8U);\n    console.log(src.rows)\n    //console.log(src.cols)\n    //console.log(src.data)\n    /*new Jimp({ data: src.data, width: src.cols, height: src.rows }, (err, image) => {\n          if (err) throw err;\n          image.write('kyc_step1.png');\n    });*/\n    let dst = getBlackHatImage(src);\n    console.log(dst);\n    //new Jimp({ data: dst.data, width: dst.cols, height: dst.rows }, (err, image) => {\n    //    if (err) throw err;\n    //    image.write('tesseract.png');\n    //});\n    //let tesbase64 = 'data:image/png;base64,' + Buffer.from(dst.data,'binary').toString('base64');\n    //console.log(await im2base64(Buffer.from(src.data)));\n    //console.log(encode(src.data,[src.cols,src.rows],'png'))\n    //await getTextFromImage('tesseract.png')\n    //    .then(console.log);\n\n    window.cv.cvtColor(dst, dst, window.cv.COLOR_RGBA2GRAY);\n    console.log(dst);\n    let pImage= preprocessImage(dst,MODEL_INPUT_SIZE,MODEL_INPUT_SIZE);\n    console.log(pImage);\n    window.cv.cvtColor(pImage, pImage, window.cv.COLOR_GRAY2RGBA);\n    /*new Jimp({ data: pImage.data, width: pImage.cols, height: pImage.rows }, (err, image) => {\n    if (err) throw err;\n        image.write('kyc_step2.png');\n    });*/\n    \n    window.cv.cvtColor(pImage, pImage, window.cv.COLOR_RGBA2GRAY);\n    console.log(pImage);\n    let probabilities=await classifyDocument(pImage,model);\n    //console.log(\"IDENTIFIED DOCUMENT: \"+docclass)\n    return probabilities\n}\n\nexport default kycimage;\n","import React, { Component, Fragment } from 'react';\nimport {\n  Alert, Button, Collapse, Container, Form, Spinner, ListGroup, Tabs, Tab\n} from 'react-bootstrap';\nimport { FaCamera, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport { openDB } from 'idb';\nimport Cropper  from 'react-cropper';\nimport * as tf from '@tensorflow/tfjs';\nimport LoadButton from '../components/LoadButton';\nimport { MODEL_CLASSES } from '../model/classes';\n//import { MODEL_CLASSES } from '../model/kyc_classes';\nimport config from '../config';\nimport './Classify.css';\nimport 'cropperjs/dist/cropper.css';\nimport kycimage from './kyc.js';\nimport tensorAsBase64 from 'tensor-as-base64';\n//import cv from \"@techstark/opencv-js\";\n//import openCV from 'react-opencvjs';\n//import Base64Binary from './base64binary.js';\n\n\n//const MODEL_PATH = '/model/model.json';\nconst MODEL_PATH = '/kyc_ocr/model/model.json';\nconst MODEL_INFO_PATH = 'https://codesque16.github.io/kyc_ocr/model/model_info.txt';\n//const MODEL_INFO_PATH = '/kyc_ocr/model/model_info.txt';\nconst IMAGE_SIZE = 600;\nconst CANVAS_SIZE = 600;\nconst TOPK_PREDICTIONS = 5;\n\nconst INDEXEDDB_DB = 'tensorflowjs';\nconst INDEXEDDB_STORE = 'model_info_store';\nconst INDEXEDDB_KEY = 'web-model';\n\n/**\n * Class to handle the rendering of the Classify page.\n * @extends React.Component\n */\nexport default class Classify extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.webcam = null;\n    this.model = null;\n    this.modelLastUpdated = null;\n\n    this.state = {\n      modelLoaded: false,\n      filename: '',\n      isModelLoading: false,\n      isClassifying: false,\n      predictions: [],\n      photoSettingsOpen: true,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: false,\n      isDownloadingModel: false\n    };\n  }\n\n  async componentDidMount() {\n    if (('indexedDB' in window)) {\n      try {\n        this.model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\n\n        // Safe to assume tensorflowjs database and related object store exists.\n        // Get the date when the model was saved.\n        try {\n          const db = await openDB(INDEXEDDB_DB, 1, );\n          const item = await db.transaction(INDEXEDDB_STORE)\n                               .objectStore(INDEXEDDB_STORE)\n                               .get(INDEXEDDB_KEY);\n          const dateSaved = new Date(item.modelArtifactsInfo.dateSaved);\n          await this.getModelInfo();\n          console.log(this.modelLastUpdated);\n          if (!this.modelLastUpdated  || dateSaved >= new Date(this.modelLastUpdated).getTime()) {\n            console.log('Using saved model');\n          }\n          else {\n            this.setState({\n              modelUpdateAvailable: true,\n              showModelUpdateAlert: true,\n            });\n          }\n\n        }\n        catch (error) {\n          console.warn(error);\n          console.warn('Could not retrieve when model was saved.');\n        }\n\n      }\n      // If error here, assume that the object store doesn't exist and the model currently isn't\n      // saved in IndexedDB.\n      catch (error) {\n        console.log('Not found in IndexedDB. Loading and saving...');\n        console.log(error);\n        this.model = await tf.loadLayersModel(MODEL_PATH);\n        await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n      }\n    }\n    // If no IndexedDB, then just download like normal.\n    else {\n      console.warn('IndexedDB not supported.');\n      this.model = await tf.loadLayersModel(MODEL_PATH);\n    }\n\n    this.setState({ modelLoaded: true });\n    this.initWebcam();\n\n    // Warm up model.\n    //let prediction = tf.tidy(() => this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])));\n    //prediction.dispose();\n  }\n\n  async componentWillUnmount() {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n\n    // Attempt to dispose of the model.\n    try {\n      this.model.dispose();\n    }\n    catch (e) {\n      // Assume model is not loaded or already disposed.\n    }\n  }\n\n  initWebcam = async () => {\n    try {\n      this.webcam = await tf.data.webcam(\n        this.refs.webcam,\n        {resizeWidth: CANVAS_SIZE, resizeHeight: CANVAS_SIZE, facingMode: 'environment'}\n      );\n    }\n    catch (e) {\n      this.refs.noWebcam.style.display = 'block';\n    }\n  }\n\n  startWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.start();\n    }\n  }\n\n  stopWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n  }\n\n  getModelInfo = async () => {\n    //let fr=new FileReader();\n    //let last_updated=fr.readAsText(`${MODEL_INFO_PATH}`);\n    //this.modelLastUpdated = data.last_updated;\n\n    await fetch(`${MODEL_INFO_PATH}`, {\n      method: 'GET',\n    })\n    .then(async (response) => {\n      await response.json().then((data) => {\n        this.modelLastUpdated = data.last_updated;\n      })\n      .catch((err) => {\n        console.log('Unable to get parse model info.');\n      });\n    })\n    .catch((err) => {\n      console.log('Unable to get model info');\n    });\n\n  }\n\n  updateModel = async () => {\n    // Get the latest model from the server and refresh the one saved in IndexedDB.\n    console.log('Updating the model: ' + INDEXEDDB_KEY);\n    this.setState({ isDownloadingModel: true });\n    this.model = await tf.loadLayersModel(MODEL_PATH);\n    await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n    this.setState({\n      isDownloadingModel: false,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: true\n    });\n  }\n\n   classifyLocalImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const croppedCanvas = this.refs.cropper.getCroppedCanvas();\n    console.log(croppedCanvas);\n    console.log(tf.browser.fromPixels(croppedCanvas));\n    const image = tf.tidy( () => tf.browser.fromPixels(croppedCanvas).toFloat());\n\n    console.log(croppedCanvas.toDataURL());\n    //const shape=image.shape;\n    const jsimg=await new Uint8ClampedArray(image.array());\n    //let jsimg= await tf.transpose(image,perm=[2,0,1]).array();\n    //console.log(new Uint8Array((jsimg.flat()).flat()));\n    //const src = new window.cv.Mat(image.shape[1],image.shape[0],window.cv.CV_8UC3,jsimg);\n    console.log(jsimg);\n    //const src = new window.cv.Mat(image.shape[0],image.shape[1],window.cv.CV_8UC3,Buffer.from(jsimg));\n    //const src = new window.cv.matFromImageData(croppedCanvas);\n    //console.log(src);\n    //for (let r = 0; r < image.shape[0]; r++){\n    //    for(let c = 0; c < image.shape[1]; c++){\n    //      src.ucharPtr(r,c)[0]=jsimg[r][c][0]\n    //      src.ucharPtr(r,c)[1]=jsimg[r][c][1]\n    //      src.ucharPtr(r,c)[2]=jsimg[r][c][2]\n    //    }\n    //};\n    //const src = new window.cv.Mat(image.shape[1],image.shape[0],window.cv.CV_8UC3,(jsimg.flat()).flat());\n    //const src = await new window.cv.matFromArray(image.shape[0], image.shape[1], window.cv.CV_8UC3,new Uint8Array((jsimg.flat()).flat()));\n    //console.log(src)\n    const imagebuffer = croppedCanvas.toDataURL()\n    //let imageData = new ImageData(image.shape[1],image.shape[0],jsimg);\n    //console.log(croppedCanvas.getImageData());\n    //console.log(imagebuffer);\n    //let imbuff= new Base64Binary(imagebuffer);\n    //console.log(imbuff.decodeArrayBuffer());\n    //console.log(Uint8Array.from(atob(imagebuffer), c => c.charCodeAt(0)))\n    // Call kyc flow and get results\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ imagebuf: imagebuffer, height: image.shape[0], width: image.shape[1], channels: image.shape[2]})\n    }\n    console.log(requestOptions)\n    //const response = await fetch(`${config.API_ENDPOINT}/kyc`,requestOptions);\n    //const data = await response.json();\n    \n    let probabilities = await kycimage(imagebuffer,this.model);\n    console.log(probabilities)\n    \n    //console.log(kycimage(imagebuffer))\n\n    //const preds = await this.getTopKClasses(data.probabilities, TOPK_PREDICTIONS);\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const context = this.refs.canvas.getContext('2d');\n    const ratioX = CANVAS_SIZE / croppedCanvas.width;\n    const ratioY = CANVAS_SIZE / croppedCanvas.height;\n    const ratio = Math.min(ratioX, ratioY);\n    context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    context.drawImage(croppedCanvas, 0, 0,\n                      croppedCanvas.width * ratio, croppedCanvas.height * ratio);\n\n    // Dispose of tensors we are finished with.\n    image.dispose();\n  }\n\n  classifyWebcamImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const imageCapture = await this.webcam.capture();\n    console.log(await tensorAsBase64(imageCapture));\n    let imagebuffer = await tensorAsBase64(imageCapture);\n   // const imagebuffer = imageCapture.toDataURL()\n   // console.log(imagebuffer)\n    let probabilities = await kycimage(imagebuffer,this.model);\n    //console.log(probabilities)\n    //console.log(imageCapture.array().then(array => console.log(array.print())));\n\n    //const resized = tf.image.resizeBilinear(imageCapture, [IMAGE_SIZE, IMAGE_SIZE]);\n    //const imageData = await this.processImage(resized);\n    //const logits = this.model.predict(imageData);\n    //const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const tensorData = tf.tidy(() => imageCapture.toFloat().div(255));\n    await tf.browser.toPixels(tensorData, this.refs.canvas);\n\n    // Dispose of tensors we are finished with.\n    imageCapture.dispose();\n    //logits.dispose();\n    tensorData.dispose();\n    //imageData.dispose();\n  }\n\n  processImage = async (image) => {\n    console.log(image.expandDims(0).toFloat());\n    return tf.tidy(() => image.expandDims(0).toFloat().div(127).sub(1));\n  }\n\n  /**\n   * Computes the probabilities of the topK classes given logits by computing\n   * softmax to get probabilities and then sorting the probabilities.\n   * @param logits Tensor representing the logits from MobileNet.\n   * @param topK The number of top predictions to show.\n   */\n  getTopKClasses = async (values, topK) => {\n    const valuesAndIndices = [];\n    for (let i = 0; i < values.length; i++) {\n      valuesAndIndices.push({value: values[i], index: i});\n    }\n    valuesAndIndices.sort((a, b) => {\n      return b.value - a.value;\n    });\n    const topkValues = new Float32Array(topK);\n    const topkIndices = new Int32Array(topK);\n    for (let i = 0; i < topK; i++) {\n      topkValues[i] = valuesAndIndices[i].value;\n      topkIndices[i] = valuesAndIndices[i].index;\n    }\n\n    const topClassesAndProbs = [];\n    for (let i = 0; i < topkIndices.length; i++) {\n      topClassesAndProbs.push({\n        className: MODEL_CLASSES[topkIndices[i]],\n        probability: (topkValues[i] * 100).toFixed(2)\n      });\n    }\n    return topClassesAndProbs;\n  }\n\n  handlePanelClick = event => {\n    this.setState({ photoSettingsOpen: !this.state.photoSettingsOpen });\n  }\n\n  handleFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      this.setState({\n        file: URL.createObjectURL(event.target.files[0]),\n        filename: event.target.files[0].name\n      });\n    }\n  }\n\n  handleTabSelect = activeKey => {\n    switch(activeKey) {\n      case 'camera':\n        this.startWebcam();\n        break;\n      case 'localfile':\n        this.setState({filename: null, file: null});\n        this.stopWebcam();\n        break;\n      default:\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Classify container\">\n\n      { !this.state.modelLoaded &&\n        <Fragment>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          {' '}<span className=\"loading-model-text\">Loading Model</span>\n        </Fragment>\n      }\n\n      { this.state.modelLoaded &&\n        <Fragment>\n        <Button\n          onClick={this.handlePanelClick}\n          className=\"classify-panel-header\"\n          aria-controls=\"photo-selection-pane\"\n          aria-expanded={this.state.photoSettingsOpen}\n          >\n          Take or Select a Photo to Classify\n            <span className='panel-arrow'>\n            { this.state.photoSettingsOpen\n              ? <FaChevronDown />\n              : <FaChevronRight />\n            }\n            </span>\n          </Button>\n          <Collapse in={this.state.photoSettingsOpen}>\n            <div id=\"photo-selection-pane\">\n            { this.state.modelUpdateAvailable && this.state.showModelUpdateAlert &&\n                <Container>\n                  <Alert\n                    variant=\"info\"\n                    show={this.state.modelUpdateAvailable && this.state.showModelUpdateAlert}\n                    onClose={() => this.setState({ showModelUpdateAlert: false})}\n                    dismissible>\n                      An update for the <strong>{this.state.modelType}</strong> model is available.\n                      <div className=\"d-flex justify-content-center pt-1\">\n                        {!this.state.isDownloadingModel &&\n                          <Button onClick={this.updateModel}\n                                  variant=\"outline-info\">\n                            Update\n                          </Button>\n                        }\n                        {this.state.isDownloadingModel &&\n                          <div>\n                            <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n                              <span className=\"sr-only\">Downloading...</span>\n                            </Spinner>\n                            {' '}<strong>Downloading...</strong>\n                          </div>\n                        }\n                      </div>\n                  </Alert>\n                </Container>\n              }\n              {this.state.showModelUpdateSuccess &&\n                <Container>\n                  <Alert variant=\"success\"\n                         onClose={() => this.setState({ showModelUpdateSuccess: false})}\n                         dismissible>\n                    The <strong>{this.state.modelType}</strong> model has been updated!\n                  </Alert>\n                </Container>\n              }\n            <Tabs defaultActiveKey=\"camera\" id=\"input-options\" onSelect={this.handleTabSelect}\n                  className=\"justify-content-center\">\n              <Tab eventKey=\"camera\" title=\"Take Photo\">\n                <div id=\"no-webcam\" ref=\"noWebcam\">\n                  <span className=\"camera-icon\"><FaCamera /></span>\n                  No camera found. <br />\n                  Please use a device with a camera, or upload an image instead.\n                </div>\n                <div className=\"webcam-box-outer\">\n                  <div className=\"webcam-box-inner\">\n                    <video ref=\"webcam\" autoPlay playsInline muted id=\"webcam\"\n                           width=\"600\" height=\"600\">\n                    </video>\n                  </div>\n                </div>\n                <div className=\"button-container\">\n                  <LoadButton\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onClick={this.classifyWebcamImage}\n                    isLoading={this.state.isClassifying}\n                    text=\"Classify\"\n                    loadingText=\"Classifying...\"\n                  />\n                </div>\n              </Tab>\n              <Tab eventKey=\"localfile\" title=\"Select Local File\">\n                <Form.Group controlId=\"file\">\n                  <Form.Label>Select Image File</Form.Label><br />\n                  <Form.Label className=\"imagelabel\">\n                    {this.state.filename ? this.state.filename : 'Browse...'}\n                  </Form.Label>\n                  <Form.Control\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"imagefile\" />\n                </Form.Group>\n                { this.state.file &&\n                  <Fragment>\n                    <div id=\"local-image\">\n                      <Cropper\n                        ref=\"cropper\"\n                        src={this.state.file}\n                        style={{height: '100%', width: '100%'}}\n                        guides={true}\n                        //aspectRatio={1 / 1}\n                        viewMode={2}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <LoadButton\n                        variant=\"primary\"\n                        size=\"lg\"\n                        disabled={!this.state.filename}\n                        onClick={this.classifyLocalImage}\n                        isLoading={this.state.isClassifying}\n                        text=\"Classify\"\n                        loadingText=\"Classifying...\"\n                      />\n                    </div>\n                  </Fragment>\n                }\n              </Tab>\n            </Tabs>\n            </div>\n          </Collapse>\n          { this.state.predictions.length > 0 &&\n            <div className=\"classification-results\">\n              <h3>Predictions</h3>\n              <canvas ref=\"canvas\" width={CANVAS_SIZE} height={CANVAS_SIZE} />\n              <br />\n              <ListGroup>\n              {this.state.predictions.map((category) => {\n                  return (\n                    <ListGroup.Item key={category.className}>\n                      <strong>{category.className}</strong> {category.probability}%</ListGroup.Item>\n                  );\n              })}\n              </ListGroup>\n            </div>\n          }\n          </Fragment>\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport About from './pages/About';\nimport Classify from './pages/Classify';\n//import NotFound from './pages/NotFound';\n\nexport default ({ childProps }) =>\n  <Switch>\n    <Route path=\"/\" exact component={Classify} props={childProps} />\n    <Route path=\"/about\" exact component={About} props={childProps} />\n  </Switch>;\n","import { PropTypes } from 'prop-types';\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\nimport AlertDismissable from './components/AlertDismissable';\nimport Routes from './Routes';\nimport './App.css';\nimport openCV from 'react-opencvjs'\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    const reloadMsg = `\n      New content is available.<br />\n      Please <a href='javascript:location.reload();'>reload</a>.<br />\n      <small>If reloading doesn't work, close all tabs/windows of this web application,\n      and then reopen the application.</small>\n    `;\n    this.state = {\n      showUpdateAlert: true,\n      reloadMsg: reloadMsg\n    };\n  }\n\n  dismissUpdateAlert = event => {\n    this.setState({ showUpdateAlert: false });\n  }\n\n  componentDidMount() {\n    openCV({\n        onLoaded: () => {console.log(window.cv.getBuildInformation());console.log('open cv loaded')},\n        onFailed: () => console.log('open cv failed to load'),\n        version: '4.5.1'\n    });\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Container>\n            <Navbar collapseOnSelect className=\"app-nav-bar\" variant=\"dark\" expand=\"lg\">\n              <Navbar.Brand href=\"/\">KYC</Navbar.Brand>\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"\">\n                  <Link className=\"nav-link\" to=\"/\">Classify</Link>\n                  <Link className=\"nav-link\" to=\"/about\">About</Link>\n                </Nav>\n              </Navbar.Collapse>\n            </Navbar>\n            { this.props.updateAvailable && this.state.showUpdateAlert &&\n              <div style={{paddingTop: '10px'}}>\n                <AlertDismissable\n                  title=\"\"\n                  variant=\"info\"\n                  message={this.state.reloadMsg}\n                  show={this.props.updateAvailable && this.state.showUpdateAlert}\n                  onClose={this.dismissUpdateAlert} />\n              </div>\n            }\n          </Container>\n          <Container>\n            <Routes />\n          </Container>\n        </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  updateAvailable: PropTypes.bool.isRequired,\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // A new service worker has previously finished installing, and is now waiting.\n      if (registration.waiting && registration.active) {\n        newerSwAvailable(registration.waiting);\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              newerSwAvailable(installingWorker);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n      function newerSwAvailable(sw){\n        // At this point, the updated precached content has been fetched,\n        // but the previous service worker will still serve the older\n        // content until all client tabs are closed.\n        console.log(\n          'New content is available and will be used when all ' +\n            'tabs for this page are closed. See http://bit.ly/CRA2-PWA.'\n        );\n        if (config && config.onUpdate) {\n          config.onUpdate(registration, sw);\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nclass Index extends Component {\n  state = {\n    contentCached: false,\n    updateAvailable: false,\n  };\n\n  componentDidMount() {\n    const config = {\n      onUpdate: this.handleUpdate,\n    };\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.register(config);\n  }\n\n  render() {\n    return (\n      <Router>\n        <App updateAvailable={this.state.updateAvailable} />\n      </Router>\n    );\n  }\n\n  handleUpdate = (registration) => {\n    const waitingServiceWorker = registration.waiting;\n\n    if (waitingServiceWorker) {\n      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\n    }\n    this.setState({ updateAvailable: true});\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n"],"sourceRoot":""}